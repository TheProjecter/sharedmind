<project name="freemind" default="dist" basedir=".">
    <!-- read version number from java source:  -->
    <loadfile property="ver" srcfile="freemind/main/FreeMind.java">
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replaceregex pattern='.*new VersionInformation\("(.*?)".*' replace="\1" flags="s" />
        </tokenfilter>
      	<!-- Replace spaces by underscores. -->
      	<tokenfilter><replaceregex pattern=" " replace="_" flags="g"/></tokenfilter>
      </filterchain>
    </loadfile>

	<property name="freemind.installer_year" value="2008"/>
	<property name="src" value="." />
	<property name="src_base_for_post" value="../" />
	<property name="build" value="../bin/classes" />
	<property name="dist" value="../bin/dist" />
	<property name="dist.lib" value="${dist}/lib" />
	<property name="dist_macos_name" value="FreeMind_${ver}" />
	<property name="dist_macos_base" value="../bin/dist_macos" />
	<property name="dist_macos" value="${dist_macos_base}/${dist_macos_name}" />
	<property name="dist_macos_app_name" value="FreeMind.app" />
	<property name="dist_macos_app" value="${dist_macos}/${dist_macos_app_name}"/>
	<property name="dist_macos_contents" value="${dist_macos_app}/Contents"/>
	<property name="dist_macos_info" value="${dist_macos_contents}/Info.plist"/>
	<property name="icns_extension" value="Modern"/>
	<property name="FM.jar" value="${dist.lib}/freemind.jar"/>
	<property name="post" value="../post" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.4" />
	<property name="java_target_version" value="1.4" />
	<property name="build.compiler" value="modern" />
	<property name="jarbundler.jar" value = "jarbundler-1.8.1.jar"/>

	<taskdef name="jarbundler"
               classpath="${src}/lib/${jarbundler.jar}"
               classname="net.sourceforge.jarbundler.JarBundler" />


	<!-- begin generator part -->
	<property name="jibxhome" value="lib/jibx"/>
	<property name="jibxjar" value="lib/bindings.jar"/>
	<property name="jibxruntimelibs" value="${jibxhome}/jibx-run.jar:${jibxhome}/xpp3.jar"/>
	<property name="jibxlibs" value="${jibxhome}/bcel.jar:${jibxhome}/jibx-bind.jar:${jibxhome}/jibx-extras.jar:${jibxruntimelibs}"/>
	<taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
		<classpath path="${jibxlibs}"/>
	</taskdef>

	<property name="classpath" value="${jibxruntimelibs}:${jibxjar}:lib/commons-lang-2.0.jar:lib/forms-1.0.5.jar:lib/SimplyHTML/SimplyHTML.jar"/>

	  <target name="xmlbind.checkStatusOfGeneration">
	    <uptodate property="xmlbind.isUpToDate"
	              srcfile="freemind_actions.xsd"
	              targetfile="${jibxjar}"/>
	  </target>

	<!-- =================================
          target: gen
         ================================= -->
	<target name="gen" depends="xmlbind.checkStatusOfGeneration" description="--> Generates the JixB binding jar." unless="xmlbind.isUpToDate">
		<mkdir dir="binding" />
		<mkdir dir="binding/src" />
		<mkdir dir="binding/classes" />
		<java fork="true" classname="org.jibx.xsd2jibx.Generate" classpath="${jibxlibs}:${jibxhome}/xsd2jibx.jar:${jibxhome}/commons-logging-1.0.4.jar:${jibxhome}/jaxme-js-0.3.jar:${jibxhome}/log4j-1.2.8.jar:lib/commons-lang-2.0.jar" failonerror="true">
			<arg line="-n freemind.controller.actions.generated.instance" />
			<arg line="-d binding/src" />
			<arg file="freemind_actions.xsd" />
		</java>
		<javac srcdir="binding/src" destdir="binding/classes" source="${java_source_version}" target="${java_target_version}" debug="on" />
		<xslt style="binding.xslt" in="binding/src/freemind/controller/actions/generated/instance/binding.xml" out="binding_new.xml" />
		<move file="binding_new.xml" tofile="binding/src/freemind/controller/actions/generated/instance/binding.xml" overwrite="true" />
		<echo message="Running binding compiler..." />
		<bind verbose="false" load="true">
			<bindingfileset dir="binding/src">
				<include name="**/*.xml" />
			</bindingfileset>
			<classpathset dir="binding/classes" />
		</bind>
		<!-- jar the bindings -->
		<jar destfile="${jibxjar}">
			<fileset dir="binding/classes">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="binding/src">
				<include name="**/*.java" />
				<include name="**/*.xml" />
			</fileset>
		</jar>
		<delete dir="binding">
		</delete>
	</target>

	<target name="patterns">
		<xslt style="patterns_updater.xslt" in="patterns.xml" out="patterns_new.xml" force="true" />
	</target>

	<!-- end generator part -->

	<target name="build" depends="gen">
	  <echo>FreeMind Version = ${ver}.</echo>
		<!-- Perform Mac Changes as a plugin. -->
		<exec dir="${src}/accessories/plugins" executable="ln" os="Mac OS X">
			<arg value="-s"/>
			<arg value="MacChanges.java.not_here"/>
			<arg value="MacChanges.java"/>
		</exec>
		<exec dir="${src}/accessories/plugins" executable="ln" os="Mac OS X">
			<arg value="-s"/>
			<arg value="MacChanges.xml.not_here"/>
			<arg value="MacChanges.xml"/>
		</exec>
		<!-- end mac changes. -->
		<mkdir dir="${build}"/>
		<javac	srcdir="${src}"
			destdir="${build}"
			classpath="${classpath}"
			debug="${debug}"
    	   source="${java_source_version}"
	       target="${java_target_version}"
			>
			<exclude name="${gen.dir}/**" />
			<exclude name="accessories/plugins/**" />
			<!-- Currently, JUnit tests are only supported inside eclipse due to
			     classpath problems of the plugins. -->
			<exclude name="tests/**" />
			<exclude name="plugins/**" />
		</javac>
		<ant antfile="accessories/plugins/build.xml" target="build"/>
		<ant antfile="plugins/build.xml" target="build"/>
	</target>

	<target name="dist" depends="jar, browser">

		<copy todir="${dist}">
			<fileset dir="${src}"
				includes="freemind.bat,freemind.sh,license,patterns.xml"
			/>
		</copy>
		<chmod file="${dist}/freemind.sh" perm="u+rx"/>
		<copy todir="${dist}">
			<fileset dir="${src}/windows-launcher">
			  <include name="FreeMind.exe"/>
			</fileset>
		</copy>
		<mkdir dir="${dist}/doc" />
		<copy todir="${dist}/doc">
			<fileset dir="${src}/doc/" includes="freemind*.mm"/>
		</copy>
		<mkdir dir="${dist}/accessories" />
		<mkdir dir="${dist}/plugins" />
		<copy todir="${dist}/accessories" >
			<fileset dir="${src}/accessories" excludes="plugins" includes="*"/>
			<!-- exclude jars too!
			<fileset dir="${build}/accessories"/> -->
		</copy>
		<!-- third party libs -->
		<mkdir dir="${dist.lib}" />
		<copy todir="${dist.lib}">
			<fileset dir="${src}/lib">
				<include name="commons-lang-2.0.jar"/>
				<include name="forms-1.0.5.jar"/>
				<include name="bindings.jar"/>
				<include name="jibx/jibx-run.jar"/>
				<include name="jibx/xpp3.jar"/>
				<include name="SimplyHTML/gnu-regexp-1.1.4.jar"/>
				<include name="SimplyHTML/SimplyHTML.jar"/>
				<include name="SimplyHTML/SimplyHTMLHelp.jar"/>
				<include name="SimplyHTML/jhall.jar"/>
			</fileset>
		</copy>

		<ant antfile="accessories/plugins/build.xml" target="dist"/>
		<ant antfile="plugins/build.xml" target="dist"/>
		<!-- Mac OS X -->
		<condition property="isMacOs">
			<os family="mac"/>
		</condition>
		<antcall target="dist_icon"/>
		<antcall target="dist_macos"/>
	</target>

	<target name="dist_icon">
<!--		<copy file="${src}/windows-launcher/Freemind_light_bulb.exe"
			tofile="${dist}/Freemind.exe" overwrite="true"/> -->
	</target>

	<target name="dist_macos" if="isMacOs">
		<delete dir="${dist_macos}"/>
		<mkdir dir="${dist_macos}"/>
		<!-- change freemind.properties -->
		<copy todir="${dist_macos}" file="${src}/freemind.properties"/>
		<replaceregexp byline="true" file="${dist_macos}/freemind.properties" match="^keystroke(.*)=(.*)\bcontrol\b" replace="keystroke\1=\2meta" flags="gim">
		</replaceregexp>
		<replaceregexp byline="true" file="${dist_macos}/freemind.properties" match="^keystroke(.*)=(.*)\binsert\b" replace="keystroke\1=\2TAB" flags="gim">
		</replaceregexp>
		<replaceregexp byline="true" file="${dist_macos}/freemind.properties" match="^#freemind.base.dir.*$" replace="freemind.base.dir=${dist_macos_app_name}" flags="gim">
		</replaceregexp>
		<!-- update jar -->
		<jar file="${FM.jar}" update="true" basedir="${dist_macos}">
			<fileset dir="${dist_macos}">
				<include name="${dist_macos}/freemind.properties"/>
			</fileset>
		</jar>
		<delete file="${dist_macos}/freemind.properties"/>
		<jarbundler dir="${dist_macos}"
		                    name="FreeMind"
		                    mainclass="freemind.main.FreeMindStarter"
		                    icon="${src}/images/FreeMindWindowIcon${icns_extension}.icns"
		                    version="${ver}"
		                    infostring="FreeMind ${ver} application (c) ${freemind.installer_year}"
							shortname="FreeMind"
		                    bundleid="freemind.main.FreeMind"
		                    signature="FM"
		                    jvmversion="1.4+"
							vmoptions='-Xms512m -Xmx1024m -Dcom.apple.macos.useScreenMenuBar=true -Xdock:name="FreeMind" -Xdock:icon="FreeMindWindowIcon${icns_extension}.icns"'
		  				    >
			<jarfileset dir="${dist}">
				<include name="**/*.jar" />
				<exclude name="**/CVS" />
				<exclude name="accessories/**" />
				<exclude name="plugins/**" />
				<exclude name="browser/**" />
				<exclude name="**/freemindbrowser.jar" />
			</jarfileset>
		</jarbundler>
		<copy todir="${dist_macos_contents}/Resources/Java">
			<fileset dir="${dist}">
				<include name="browser/**" />
				<include name="accessories/*" />
				<include name="accessories/**/*" />
				<include name="plugins/*" />
				<include name="plugins/**/*" />
				<include name="doc/*" />
			</fileset>
		</copy>
		<!-- Delete the JavaApplicationStub and replace it with a symbolic link -->
		  <!--   which should work on older and future versions of OS X
		   Taken from http://informagen.com/JarBundler/StubFile.html         -->

		  <delete file="${dist_macos_contents}/MacOS/JavaApplicationStub"/>
		  <exec executable="ln">
		    <arg line="-s /System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub"/>
		    <arg value="${dist_macos_contents}/MacOS/JavaApplicationStub"/>
		  </exec>


		<!-- Associate Freemind with mm -->
		<xslt style="mac_file_association.xslt"
			in ="${dist_macos_info}"
			out="${dist_macos_info}2"/>
		<move file="${dist_macos_info}2"
			  tofile="${dist_macos_info}"/>
		<!-- Done. -->
	</target>

	<target name="post" depends="dist,browser,doc">
		<mkdir dir="${post}" />
<!--		<tar tarfile="${post}/freemind-bin.tar"
			basedir="${dist}"
			longfile="gnu"
			excludes="doc/javadoc/,plugins/**" />
		<gzip src="${post}/freemind-bin.tar"
			zipfile="${post}/freemind-bin-${ver}.tar.gz" />
		<tar tarfile="${post}/freemind-browser.tar"
			longfile="gnu"
			basedir="${dist}/browser" />
		<gzip src="${post}/freemind-browser.tar"
			zipfile="${post}/freemind-browser-${ver}.tar.gz" /> -->
		<tar tarfile="${post}/freemind-src.tar"
			longfile="gnu"
			basedir="${src_base_for_post}"
			includes="freemind/**,.classpath,.project" excludes="freemind/bin/**" />
		<gzip src="${post}/freemind-src.tar"
			zipfile="${post}/freemind-src-${ver}.tar.gz" />
		<delete>
			<fileset dir="${post}" includes="*.tar" />
		</delete>
		<zip destfile="${post}/freemind-bin-${ver}.zip"
			basedir="${dist}"
			excludes="doc/javadoc/,plugins/**" />
		<!-- fc, 14.2.2005: new max export -->
		<zip destfile="${post}/freemind-bin-max-${ver}.zip"
			basedir="${dist}"
			excludes="doc/javadoc/" />
	<!--	<zip destfile="${post}/freemind-src-${ver}.zip"
			basedir="${src_base_for_post}"
			includes="freemind/**,.classpath,.project" /> -->
		<zip destfile="${post}/freemind-browser-${ver}.zip"
			basedir="${dist}/browser" />
		<ant antfile="plugins/build.xml" target="post"/>
		<antcall target="post_macos">
		</antcall>
	</target>



	<target name="post_macos">

		<exec dir="." executable="bash" os="Mac OS X">
			<arg value="./mkdmg.sh"/>
			<arg path="${dist_macos_app}"/>
		</exec>
		<exec dir="." executable="mv" os="Mac OS X">
			<arg path="/tmp/${dist_macos_app_name} Archive.dmg"/>
			<arg path="${post}/${dist_macos_name}.dmg"/>
		</exec>

	</target>

	<target name="jar" depends="build">
		<mkdir dir="${dist.lib}" />
		<jar jarfile="${FM.jar}"
		     manifest="${src}/MANIFEST.MF"
			update="true">
			<fileset dir="${build}">
				<exclude name="accessories/**"/>
				<exclude name="plugins/**"/>
				<exclude name="**/*.jar"/>
			</fileset>
			<fileset dir="${src}">
				<include name="images/*"/>
				<include name="images/icons/*.png"/>
				<include name="freemind.properties"/>
				<include name="patterns.xml"/>
				<include name="patterns_updater.xslt"/>
				<include name="Resources*"/>
				<include name="mindmap_menus.xml"/>
				<include name="**/freemind_version_updater.xslt"/>
			</fileset>
		</jar>
	</target>

	<target name="browser" depends="build">
		<mkdir dir="${dist}/browser" />
		<jar jarfile="${dist}/browser/freemindbrowser.jar" >
			<fileset dir="${build}">

				<include name="freemind/common/TextTranslator.class"/>
				<include name="freemind/common/NamedObject.class"/>
				<include name="freemind/view/*"/>
				<include name="freemind/view/mindmapview/*"/>
				<include name="freemind/view/mindmapview/attributeview/*"/>
				<include name="freemind/main/*"/>
				<include name="freemind/controller/*"/>
				<include name="freemind/controller/filter/**"/>
				<include name="freemind/extensions/*"/>
				<include name="freemind/preferences/*"/>
				<include name="freemind/preferences/layout/*"/>
				<include name="freemind/modes/*"/>
				<include name="freemind/modes/attributes/*"/>
				<include name="freemind/modes/browsemode/*"/>
				<include name="freemind/modes/common/**"/>
				<include name="freemind/modes/viewmodes/*"/>

			</fileset>
			<fileset dir="${src}">
				<include name="images/*"/>
				<include name="images/icons/*.png"/>
				<include name="*.properties"/>
				<exclude name="Resources_*.properties"/>
				<!--				<include name="*.xml"/>
				<exclude name="build.xml"/> -->
				<exclude name="images/*.svg"/>
				<exclude name="images/splash.JPG"/>
				<exclude name="images/Freemind_Splash_Butterfly_Modern.png"/>
				<exclude name="images/FreeMindWindowIcon.icns"/>

			</fileset>
			<fileset dir="${src}">
				<include name="Resources_en.properties"/>
			</fileset>
		</jar>
		<copy todir="${dist}/browser" >
			<fileset dir="${src}/html">
				<include name="*.*html"/>
			</fileset>
			<fileset dir="${src}">
				<include name="license*"/>
			</fileset>
			<fileset dir="${src}/doc">
				<include name="freemind.mm"/>
			</fileset>
		</copy>
	</target>

	<target name="doc" depends="gen">
		<mkdir dir="${dist}/doc/javadoc" />
		<javadoc sourcepath="${src}"
	         destdir="${dist}/doc/javadoc"
			 breakiterator="yes"
			 classpath="${classpath}"
		         packagenames="freemind.*" />
	</target>

	<target name="clean">
		<!-- Eclipse target: -->
		<delete dir="bin/classes"  quiet="true"/>
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete dir="${dist_macos_base}"  quiet="true"/>
		<delete dir="${gen.dir}"  quiet="true"/>
		<delete dir="${post}"  quiet="true"/>
		<delete file="${jibxjar}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>

	<target name="run" depends="dist">
		<!-- failonerror is false here, as we want to
		     make runWithoutPreferences safe. -->
		<java classname="freemind.main.FreeMindStarter"
          fork="yes"
          dir="${dist}" failonerror="false">
			<!--    <jvmarg value="-Djava.util.logging.config.file=logging.properties" /> -->
			<classpath>
				<!--<pathelement location="${dist}"/>-->
				<pathelement location="${FM.jar}"/>
				<pathelement location="${jibxjar}"/>
				<pathelement path="${jibxruntimelibs}"/>
			</classpath>
		</java>
	</target>

	<!-- =================================
          target: runWithoutPreferences
         ================================= -->
    <target name="runWithoutPreferences" description="Starts the application moving the current preferences temporarily away.">
    	<rename dest="${user.home}/.freemind_bak" src="${user.home}/.freemind"/>
    	<mkdir dir="${user.home}/.freemind"/>
     	<antcall target="run"></antcall>
    	<exec dir="${user.home}/.freemind" executable="cat" os="Linux" failifexecutionfails="no" failonerror="false">
			<arg value="auto.properties"/>
    	</exec>
    	<delete dir="${user.home}/.freemind" failonerror="false"></delete>
        <rename src="${user.home}/.freemind_bak" dest="${user.home}/.freemind" replace="yes"></rename>
    </target>


	<property name="log_file" location="${user.home}/.freemind/log.0"/>

	<target name="runmac" depends="dist" description="Starts the application under Mac (using the open method).">
		<move file="${log_file}" tofile="${log_file}.bak"></move>
		<exec dir="." executable="open" os="Mac OS X">
			<arg path="${dist_macos_app}"/>
		</exec>
		<waitfor><available file="${log_file}"></available></waitfor>
		<exec dir="." executable="tail" os="Mac OS X">
			<arg line="-f ${log_file}"/>
		</exec>
	</target>

	<!-- does not work!! -->
	<target name="val">
		<xmlvalidate lenient="false"
		  failonerror="no" warn="true" classname="org.apache.xerces.parsers.SAXParser"
            classpath="plugins/svg/xerces_2_5_0.jar">
			<fileset dir="." includes="**/*.mm"/>
			<attribute name="http://apache.org/xml/features/validation/schema"
		  value="true"/>
			<attribute name="http://xml.org/sax/features/namespaces" value="true"/>
			<property
		  name="http://apache.org/xml/properties/schema/external-schemaLocation"
		  value="freemind.xsd"/>
		</xmlvalidate>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: all
         - - - - - - - - - - - - - - - - - -->
    <target name="all">
    	<antcall target="post"></antcall>

    </target>

	<!-- =================================
          target: installers for everybody
         ================================= -->
    <target name="installers_all" depends="" description="--> Creates all installers.">
    	<property name="cvstag" value="fm_060405_integration" />

    	<property name="InnoSetup" location="D:/Programme/Inno Setup 5/ISCC.exe" />
<!--
    	<property name="InnoSetup" location="/home/foltin/.wine/drive_c/Programme/Inno Setup 5/ISCC.exe" />
-->
        <property name="inst.dir" location="../tmp/fm_installer"/>
        <property name="inst.dest.dir" location="../installers"/>
    	<delete dir="${inst.dest.dir}" failonerror="false"/>
<!--
    	<delete dir="${inst.dir}" failonerror="false"/>
-->
    	<mkdir dir="${inst.dest.dir}"/>
    	<mkdir dir="${inst.dir}"/>
		<cvs  cvsRoot=":pserver:anonymous@freemind.cvs.sourceforge.net:/cvsroot/freemind"
		       package="freemind"
		       dest="${inst.dir}"
		       compressionlevel="9"
			  command="checkout -P -r ${cvstag}"></cvs>
		<cvs  dest="${inst.dir}/freemind"
		       compressionlevel="9"
			  command="update -k b -P -- freemind.sh "></cvs>
		<cvs  cvsRoot=":pserver:anonymous@freemind.cvs.sourceforge.net:/cvsroot/freemind"
		       package="admin"
		       compressionlevel="9"
		       dest="${inst.dir}"></cvs>
    	<ant dir="${inst.dir}/freemind" target="clean" ></ant>
    	<ant dir="${inst.dir}/freemind" target="post" ></ant>
    	<copy todir="${inst.dest.dir}">
    		<fileset dir="${inst.dir}/post">
			    <include name="*"/>
			</fileset>
		</copy>
    	<exec dir="${inst.dir}/admin/installer/windows/" executable="${InnoSetup}" osfamily="Windows">
			<arg value="Freemind.iss"/>
    	</exec>
    	<exec dir="${inst.dir}/admin/installer/windows/" executable="wine" os="Linux">
			<arg value="${InnoSetup}"/>
			<arg value="Freemind.iss"/>
    	</exec>
    	<copy todir="${inst.dest.dir}">
    		<fileset dir="${inst.dir}/admin/installer/windows/Output/">
			    <include name="*.exe"/>
			</fileset>
		</copy>
    	<!--
    	<delete dir="${inst.dir}" failonerror="false"/>
    	-->
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: create_windows_installer                      
         - - - - - - - - - - - - - - - - - -->
    <target name="create_windows_installer">
    	<ant dir="${inst.windows.installer}" target="${inst.windows.variant}"></ant>
    	<exec dir="${inst.windows.installer}" executable="wine" os="Linux">
			<arg value="/home/foltin/.wine/drive_c/Programme/Inno Setup 5/ISCC.exe"/>
			<arg value="Freemind.iss"/>
    	</exec>
    </target>
	
	<!-- =================================
          target: installers, for Chris' computes
         ================================= -->
    <target name="installers_chris" depends="" description="--> Creates all installers. This is a task that only works on Chris laptops. But it should be informative to others who want to build the installers">
    	<property name="cvsRoot" value=":pserver:anonymous@freemind.cvs.sourceforge.net:/cvsroot/freemind"/>

        <property name="inst.dir" location="/tmp/fm_installer"/>
        <property name="inst.dest.dir" location="../installers"/>
    	<property name="inst.windows.installer" location="${inst.dir}/admin/installer/windows"/>
<!--    	<property name="branch" value="fm-0-8-1"/> -->
	   	<property name="branch" value="fm_060405_integration"/> 

    	<mkdir dir="${inst.dest.dir}"/>
    	<delete dir="${inst.dir}" failonerror="false"/>
    	<mkdir dir="${inst.dir}"/>
		<cvs  cvsRoot="${cvsRoot}"
		       package="freemind"
		       dest="${inst.dir}"
			  command="checkout -P -r ${branch}"></cvs>
		<cvs  cvsRoot="${cvsRoot}"
		       package="admin/installer/windows"
		       dest="${inst.dir}"></cvs>
    	<ant dir="${inst.dir}/freemind" target="post" inheritall="false"></ant>
    	<copy todir="${inst.dest.dir}">
    		<fileset dir="${inst.dir}/post">
			    <include name="*"/>
			</fileset>
		</copy>
    	<copy todir="${inst.windows.installer}">
    		<fileset dir="../admin/installer/windows/">
			    <include name="jre_installer.exe"/>
			    <include name="jre/**"/>
			</fileset>
		</copy>
<!--
    	<property name="freemind.version" value="0.8.1"/>
    	-->
    	<property name="freemind.version" value="${ver}"/>  
    	<antcall target="create_windows_installer">
    		<param name="inst.windows.variant" value="installer"/>
    	</antcall>
    	<antcall target="create_windows_installer">
    		<param name="inst.windows.variant" value="installer_min"/>
    	</antcall>
    	<antcall target="create_windows_installer">
    		<param name="inst.windows.variant" value="installer_java_installer_embedded"/>
    	</antcall>
    	<antcall target="create_windows_installer">
    		<param name="inst.windows.variant" value="installer_java_embedded"/>
    	</antcall>
    	<copy todir="${inst.dest.dir}">
    		<fileset dir="${inst.windows.installer}/Output/">
			    <include name="*.exe"/>
			</fileset>
		</copy>
    	<exec dir="." executable="ssh" os="Linux">
    		<arg value="foltin@192.168.2.100"/>
    		<arg value="cd /tmp ; rm -rf fm_installers ; mkdir fm_installers ; cd fm_installers ; cvs -d${cvsRoot} login ; cvs -d${cvsRoot} co -P -r ${branch} freemind ; cd freemind ; ant post"/>
    	</exec>
    	<exec dir="." executable="scp" os="Linux">
    		<arg value="foltin@192.168.2.100:/tmp/fm_installers/post/*.dmg"/>
    		<arg value="${inst.dest.dir}/"/>
    	</exec>
    	<delete dir="${inst.dir}" failonerror="false"/>
    </target>

</project>

